<%#- SPDX-License-Identifier: Apache-2.0 -%>
-- This file is managed by Puppet [see dnsdist/dnsdist.conf.erb].

-- == Generic Configuration (dnsdist 1.8.x) ==

-- dnsdist by default restricts queries from private IPs and other local addresses
-- we allow traffic from anywhere as a public service
addACL('0.0.0.0/0')
addACL('::/0')

<% if @enable_packetcache -%>
-- packet cache configuration, applied to the default pool
pc = newPacketCache(<%= @packetcache_max %>)
getPool(""):setCache(pc)
<% end -%>

-- downstream backend recursor (running pdns-recursor)
-- ECS is only enabled for queries to WMF authoritative nameservers; see `edns-subnet-whitelist' in dnsrecursor/recursor.conf.erb
newServer({address='<%= @resolver['ip'] %>:<%= @resolver['port'] %>', name='<%= @resolver['name'] %>', useClientSubnet=<%= @enable_ecs ? true : false %>})

<% if @enable_console -%>
-- control socket access (default port is 5199)
controlSocket('127.0.0.1')
setKey('<%= @console_key %>')
<% end -%>

<% if @enable_webserver -%>
-- web server and API access (primarily used for Prometheus)
webserver('<%= @webserver['host'] %>:<%= @webserver['port'] %>')
setWebserverConfig({password='<%= @webserver['password'] %>', apiKey='<%= @webserver['api_key'] %>', custom_headers=nil, acl='<%= @webserver['acl'].join(", ") %>'})
<% end -%>

<% if @drop_querytype_any -%>
-- drop qtype=ANY by returning RCODE NOTIMP
addAction(QTypeRule(DNSQType.ANY), RCodeAction(DNSRCode.NOTIMP))
<% end -%>

-- disable broken security polling due to custom Debian build (see T273322)
setSecurityPollSuffix("")

<% if @enable_wikidough -%>
-- configuration settings specific to Wikidough

-- intercept queries for durum, the check service
-- let queries for the check service go through as they would to pdns-recursor
addAction(QNameRule("check.wikimedia-dns.org."), PoolAction(""))
-- to make a distinction between DoH and DoT, add a rule to check where the query was received
addAction(AndRule({DSTPortRule(443), RegexRule("\\.check\\.wikimedia-dns\\.org$")}), SpoofAction({"185.71.138.140", "2001:67c:930::3"}))
addAction(AndRule({DSTPortRule(853), RegexRule("\\.check\\.wikimedia-dns\\.org$")}), SpoofAction({"185.71.138.142", "2001:67c:930::5"}))

addAction(AndRule({QNameRule('dough.wikimedia-dns.org.'), QTypeRule(DNSQType.TXT)}), SpoofRawAction("\027Be\032excellent\032to\032each\032other\033", {ttl=2022}))
<% end -%>

-- == Performance Tuning ==

-- set the maximum number of TCP client threads (dnsdist's default is 10)
setMaxTCPClientThreads(<%= @tcp_client_threads_max %>)

-- == Privacy ==

-- restrict the size of the in-memory ring buffers used for traffic inspection
setRingBuffersSize(<%= @ringbuffer_max %>)

-- == DNS over HTTPS (DoH) ==

-- DoH Configuration Options
optionsDOH = {
  minTLSVersion='<%= @tls_config_doh['min_tls_version'] %>',
<% if @tls_config_doh.has_key?('ciphers_tls13') -%>
  ciphersTLS13='<%= @tls_config_doh['ciphers_tls13'].join(':') %>',
<% end -%>
<% if @tls_config_doh.has_key?('ciphers') -%>
  ciphers='<%= @tls_config_doh['ciphers'].join(':') %>',
<% end -%>
<% if @tls_common.has_key?('ocsp_response_path') -%>
  ocspResponses={'<%= @tls_common['ocsp_response_path'] %>'},
<% end -%>
<% unless @custom_headers.empty? -%>
  customResponseHeaders={<% @custom_headers.each do |key, value| -%>["<%= key %>"]="<%= value %>",<% end -%>},
<% end -%>
}

-- enable DoH (default port is 443)
addDOHLocal('0.0.0.0', '<%= @tls_common['cert_chain_path'] %>', '<%= @tls_common['cert_privkey_path'] %>', { '<%= @doh_paths.join("', '") %>' }, optionsDOH)
addDOHLocal('[::]', '<%= @tls_common['cert_chain_path'] %>', '<%= @tls_common['cert_privkey_path'] %>', { '<%= @doh_paths.join("', '") %>' }, optionsDOH)

<% if @enable_landing -%>
-- static pages for the DoH frontend (/)
-- used to display help information and/or privacy policy
staticMap = { newDOHResponseMapEntry("^/$", 200, [[ <%= @landing_text %> ]]) }

-- dohFE0 is the DoH frontend for 0.0.0.0:443
dohFE0 = getDOHFrontend(0)
dohFE0:setResponsesMap(staticMap)

-- dohFE1 is the DoH frontend for [::]:443
dohFE1 = getDOHFrontend(1)
dohFE1:setResponsesMap(staticMap)
<% end -%>

-- == DNS over TLS (DoT) ==

-- DoT Configuration Options
optionsDOT = {
  minTLSVersion='<%= @tls_config_dot['min_tls_version'] %>',
<% if @tls_config_dot.has_key?('ciphers_tls13') -%>
  ciphersTLS13='<%= @tls_config_dot['ciphers_tls13'].join(':') %>',
<% end -%>
<% if @tls_config_dot.has_key?('ciphers') -%>
  ciphers='<%= @tls_config_dot['ciphers'].join(':') %>',
<% end -%>
<% if @tls_common.has_key?('ocsp_response_path') -%>
  ocspResponses={'<%= @tls_common['ocsp_response_path'] %>'},
<% end -%>
}

-- enable DoT (default port is 853)
addTLSLocal('0.0.0.0', '<%= @tls_common['cert_chain_path'] %>', '<%= @tls_common['cert_privkey_path'] %>', optionsDOT)
addTLSLocal('[::]', '<%= @tls_common['cert_chain_path'] %>', '<%= @tls_common['cert_privkey_path'] %>', optionsDOT)
