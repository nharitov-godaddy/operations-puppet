# SPDX-License-Identifier: Apache-2.0
# client<->ats-be metrics
# histogram trafficserver_backend_client_ttfb
histogram trafficserver_backend_client_ttfb by backend buckets -1, 0.001, 0.005, 0.01, 0.02, 0.045, 0.07, 0.1, 0.15, 0.25, 0.35, 0.5, 0.75, 1.2, 3.0, 10.0, 30.0, 60.0
histogram trafficserver_backend_cache_result_code_client_ttfb by backend, cache_result_code buckets -1, 0.001, 0.005, 0.01, 0.02, 0.045, 0.07, 0.1, 0.15, 0.25, 0.35, 0.5, 0.75, 1.2, 3.0, 10.0, 30.0, 60.0

histogram trafficserver_backend_total_plugin_time by backend buckets -1, 0.001, 0.005, 0.01, 0.02, 0.045, 0.07, 0.1, 0.15, 0.25, 0.35, 0.5, 0.75, 1.0
histogram trafficserver_backend_active_plugin_time by backend buckets -1, 0.001, 0.005, 0.01, 0.02, 0.045, 0.07, 0.1, 0.15, 0.25, 0.35, 0.5, 0.75, 1.0

histogram trafficserver_backend_client_cache_read_time by backend buckets -1, 1, 5, 10, 20, 45, 70, 100, 150, 250, 350, 500, 750, 1000
histogram trafficserver_backend_client_cache_write_time by backend buckets -1, 1, 5, 10, 20, 45, 70, 100, 150, 250, 350, 500, 750, 1000

# ats-be<->origin metrics
# histogram trafficserver_backend_requests_seconds
counter trafficserver_backend_requests_seconds_bucket by le, method, backend
counter trafficserver_backend_requests_seconds_sum by status, method, backend
counter trafficserver_backend_requests_seconds_count by status, method, backend

counter trafficserver_backend_connections_total by backend

# ats-be SLI metrics
hidden gauge process_time_ms
counter trafficserver_backend_sli_total
counter trafficserver_backend_sli_good
counter trafficserver_backend_sli_bad


# Match every single line without a chance of messing it up due to bad regex (T320615)
/^/ {
  trafficserver_backend_sli_total++
}

# This block matches all log lines, regardless of the cache status. Hits,
# misses, and passes are all included.
/ClientTTFB:(?P<client_ttfb>-?[0-9]+).*CacheReadTime:(?P<cache_read_time>-?[0-9]+).*CacheWriteTime:(?P<cache_write_time>-?[0-9]+).*TotalPluginTime:(?P<total_plugin_time>[0-9]+).*ActivePluginTime:(?P<active_plugin_time>[0-9]+).*OriginServer:(?P<backend>\S+).*CacheResultCode:(?P<cache_result_code>[A-Z_-]+)/ {
  # client_ttfb takes a value of -1 if the client aborts the request
  $client_ttfb >= 0 {
    trafficserver_backend_client_ttfb[$backend] = float($client_ttfb) * 0.001
    trafficserver_backend_cache_result_code_client_ttfb[$backend][$cache_result_code] = float($client_ttfb) * 0.001
  }
  # cache_(read|write_time) can be -1
  # if cache lookup is skipped read = -1 and
  # cache hits that doesn't require revalidation will report write = -1
  $cache_read_time >= 0 {
    trafficserver_backend_client_cache_read_time[$backend] = $cache_read_time
  }
  $cache_write_time >= 0 {
    trafficserver_backend_client_cache_write_time[$backend] = $cache_write_time
  }
  trafficserver_backend_total_plugin_time[$backend] = float($total_plugin_time) * 0.001
  trafficserver_backend_active_plugin_time[$backend] = float($active_plugin_time) * 0.001

  process_time_ms = $total_plugin_time
  $cache_read_time > 0 {
    process_time_ms += $cache_read_time
  }
  $cache_write_time > 0 {
    process_time_ms += $cache_write_time
  }
}

# Request processed in less than 150ms and not resulting on a 500 response
/RespStatus:(?P<resp_status>[0-9][0-9][0-9]).*OriginStatus:(?P<origin_status>[0-9][0-9][0-9])/ && ($resp_status != 500 || ($resp_status == 500 && $origin_status == 500)) && process_time_ms < 150 {
  trafficserver_backend_sli_good++
} else {
  trafficserver_backend_sli_bad++
}

# Log entries representing cache hits have OriginStatus:000.
# Match OriginStatus:[1-9][0-9][0-9] to exclude those.
/ConnReuse:(?P<conn_reuse>[0-9]+).*TTFetchHeaders:(?P<origin_ttfb>[0-9.]+).*OriginServer:(?P<backend>\S+).*ReqMethod:(?P<method>[A-Z]+).*OriginStatus:(?P<status>[1-9][0-9][0-9])/ {
  trafficserver_backend_requests_seconds_count[$status][$method][$backend]++

  # A new TCP connection was established if conn_reuse is 0
  $conn_reuse == 0 {
    trafficserver_backend_connections_total[$backend]++
  }

  # ttfb is in milliseconds, and we want seconds.
  trafficserver_backend_requests_seconds_sum[$status][$method][$backend] += $origin_ttfb / 1000.0

  # these statements "fall through", so the histogram is cumulative. The
  # collecting system can compute the percentile bands by taking the ratio of
  # each bucket value over the final bucket.
  $origin_ttfb < 45 {
    trafficserver_backend_requests_seconds_bucket["0.045"][$method][$backend]++
  }
  $origin_ttfb < 70 {
    trafficserver_backend_requests_seconds_bucket["0.07"][$method][$backend]++
  }
  $origin_ttfb < 100 {
    trafficserver_backend_requests_seconds_bucket["0.1"][$method][$backend]++
  }
  $origin_ttfb < 150 {
    trafficserver_backend_requests_seconds_bucket["0.15"][$method][$backend]++
  }
  $origin_ttfb < 250 {
    trafficserver_backend_requests_seconds_bucket["0.25"][$method][$backend]++
  }
  $origin_ttfb < 350 {
    trafficserver_backend_requests_seconds_bucket["0.35"][$method][$backend]++
  }
  $origin_ttfb < 500 {
    trafficserver_backend_requests_seconds_bucket["0.5"][$method][$backend]++
  }
  $origin_ttfb < 750 {
    trafficserver_backend_requests_seconds_bucket["0.75"][$method][$backend]++
  }
  $origin_ttfb < 1200 {
    trafficserver_backend_requests_seconds_bucket["1.2"][$method][$backend]++
  }
  trafficserver_backend_requests_seconds_bucket["+Inf"][$method][$backend]++
}
