# SPDX-License-Identifier: Apache-2.0
# Filter to ingest client errors into ES
filter {
  if [$schema] == "/w3c/reportingapi/network_error/1.0.0" {

    # extract template version from schema definition
    grok {
      match => {
        "[$schema]" => "(?<[@metadata][template_version]>[0-9]\.[0-9]\.[0-9]$)"
      }
      overwrite => [ "[@metadata][template_version]" ]
      id => "filter/w3creportingapi/grok/extract_template_version"
    }

    # extract uri_host (host part of url) from url field
    # enable ecs_compatbility to access updated grok patterns including URIQUERY
    grok {
      ecs_compatibility => v1
      match => {
        "url" => "%{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:uri_host})?(?:%{URIPATH}(?:\?%{URIQUERY})?)?"
      }
      id => "filter/w3creportingapi/grok/extract_uri_host"
    }

    # set output and rotation
    mutate {
      replace => {
        "[@metadata][output]" => "w3creportingapi"
        "[@metadata][rotation_frequency]" => "weekly"
      }
      id => "filter/w3creportingapi/mutate/w3creportingapi_routing"
    }

    # Sometimes server_ip is an empty string which is invalid for the IP field type. (w3creportingapi-1.0.0-1)
    if [body][server_ip] == "" {
      mutate {
        remove_field => [ "[body][server_ip]" ]
        id => "filter/mutuate/w3creportingapi_server_ip_remove"
      }
    }

    # Strip out fields incompatible with w3creportingapi-1.0.0
    prune {
      whitelist_names => [
        "^@timestamp",
        "^tags$",
        "^type$",
        "^\$schema$",
        "^meta$",
        "^http$",
        "^age$",
        "^url$",
        "^user_agent",
        "^body$",
        "^uri_host$"
      ]
      id => "filter/prune/w3creportingapi_allow_list"
    }

  }
}
