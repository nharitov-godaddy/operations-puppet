# SPDX-License-Identifier: Apache-2.0
# Filters for NodeJS log producers to ECS formatting
filter {
  if [program] == "node" {
    # mutate crashes when trying to overwrite the host attribute.  forcing the correct behavior here
    ruby {
      code => "event.remove('host'); event.set('[host][name]', event.get('logsource'))"
      id => "filter/node_migration/overwrite_host"
    }

    # response body content could come from `res.body` or `err.body`
    ruby {
      code => "event.set('[http][response][body][content]', (event.get('[res][body]') || event.get('[err][body]')).to_s) if (event.get('[res][body]') || event.get('[err][body]'))"
      id => "filter/node_migration/response_body_content"
    }

    mutate {
      add_field => {
        "[ecs][version]" => "1.7.0"
      }
      rename => {
        "name" => "[service][type]"
        "pid" => "[process][pid]"
        "time" => "timestamp"
        "latency" => "[event][duration]"
        "request_id" => "[event][id]"
        "[root_req][headers]" => "[http][request][headers]"
        "[root_req][method]" => "[http][request][method]"
        "[root_req][uri]" => "[url][original]"
        "[res][headers]" => "[http][response][headers]"
        "[res][status]" => "[http][response][status_code]"
        "[res][requestName]" => "[labels][request_name]"
        "levelPath" => "[labels][level_path]"
        "[res][msg]" => "[error][message]"
        "[res][name]" => "[error][type]"
        "stack" => "[error][stack_trace]"
        "msg" => "message"
        "component" => "[labels][level_path]"
        "[err][root_req][method]" => "[http][request][method]"
        "[err][root_req][headers]" => "[http][request][headers]"
        "[err][root_req][uri]" => "[url][original]"
        "[err][api_path]" => "[labels][api_path]"
        "[err][request_id]" => "[event][id]"
        "[err][response]" => "[event][id]"
        "[err][message]" => "[error][message]"
        "[err][stack]" => "[error][stack_trace]"
        "response" => "[error][stack_trace]"
        "[request][method]" => "[http][request][method]"
        "[request][url]" => "[url][original]"
        "[request][query][groups]" => "[labels][query_groups]"
        "[request][query][lang]" => "[labels][query_lang]"
        "[request][query][title]" => "[labels][query_title]"
        "[request][query][domain]" => "[url][domain]"
        "[request][params][0]" => "[url][path]"
        "[request][remotePort]" => "[client][port]"
        "[request][remoteAddress]" => "[client][ip]"
        "[request][headers]" => "[http][request][headers]"
        "info" => "[error][message]"
      }
      id => "filter/node_migration/mutate"
    }
  }
}
