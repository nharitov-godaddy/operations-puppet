# NOTE: This file is managed by Puppet.

import datetime

#---------------------------------------------------------
# Flask App Builder configuration
#---------------------------------------------------------
# Your App secret key
SECRET_KEY = '<%= @secret_key %>'

# The SQLAlchemy connection string to your database backend
# This connection defines the path to the database that stores your
# superset metadata (slices, connections, tables, dashboards, ...).
# Note that the connection information to connect to the datasources
# you want to explore are managed directly in the web UI
SQLALCHEMY_DATABASE_URI = '<%= @database_uri %>'

wikimedia_superset_timeout = datetime.timedelta(minutes=3).seconds

SQLLAB_TIMEOUT = wikimedia_superset_timeout
SUPERSET_WEBSERVER_TIMEOUT = wikimedia_superset_timeout

# Uploaded files will temporarily be stored in this directory.
# This is used to support superset CSV uploads.
UPLOAD_FOLDER = '/tmp/superset_uploads/'

# We explicitly disable the old Druid interface to define datasources to favor
# the Druid tables (via SQLAlchemy), since the latter are the only supported
# ones by upstream.
DRUID_IS_ACTIVE = False

<% if @auth_type -%>
from flask_appbuilder.security.manager import <%= @auth_type %>
AUTH_TYPE = <%= @auth_type %>
<% if @auth_type == 'AUTH_REMOTE_USER' -%>
ENABLE_PROXY_FIX = True

# Set environ['REMOTE_USER'] = HTTP_X_REMOTE_USER header.
# Make sure your HTTP proxy that handles athentication
# sets the X-Remote-User header properly.
class RemoteUserMiddleware(object):
    def __init__(self, app):
        self.app = app
    def __call__(self, environ, start_response):
        user = environ.pop('<%= @remote_user %>', None)
        environ['REMOTE_USER'] = user
        return self.app(environ, start_response)

ADDITIONAL_MIDDLEWARE = [RemoteUserMiddleware, ]
<% end -%>

<% end -%>
<% if @auth_settings -%>
<% @auth_settings.keys.sort.each do |key| -%>
<%= key %> = '<%= @auth_settings[key] %>'
<% end -%>
<% end -%>

<%
# If @password_mapping is given, output a python dict
# mapping sqlalchemy URIs to passwords.  Then create
# a function that returns password given the uri, and
# assign that to SQLALCHEMY_CUSTOM_PASSWORD_STORE.
#
# This allows for configuration of databases in the
# superset GUI, without having to enter passwords through it.
#
if @password_mapping
-%>
password_mapping = {
<% @password_mapping.keys.sort.each do |uri| -%>
    '<%= uri %>': '<%= @password_mapping[uri] %>',
<% end -%>
}

def lookup_password(uri):
    return password_mapping.get(str(uri), None)
SQLALCHEMY_CUSTOM_PASSWORD_STORE = lookup_password

<% end -%>

<% if @metadata_cache_uri -%>
CACHE_CONFIG = {
    'CACHE_TYPE': 'memcached',
    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 12, # 12 hour default (in secs)
    'CACHE_KEY_PREFIX': 'superset_metadata',
    'CACHE_MEMCACHED_SERVERS': ['<%= @metadata_cache_uri %>'],
}
<% end -%>

<% if @data_cache_uri -%>
DATA_CACHE_CONFIG = {
    'CACHE_TYPE': 'memcached',
    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 12, # 12 hour default (in secs)
    'CACHE_KEY_PREFIX': 'superset_results',
    'CACHE_MEMCACHED_SERVERS': ['<%= @data_cache_uri %>'],
}
<% end -%>
<% if @filter_state_cache_uri -%>
FILTER_STATE_CACHE_CONFIG = {
    'CACHE_TYPE': 'memcached',
    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 12, # 12 hour default (in secs)
    'CACHE_KEY_PREFIX': 'superset_filter_state',
    'CACHE_MEMCACHED_SERVERS': ['<%= @filter_state_cache_uri %>'],
}
<% end -%>
<% if @explore_form_data_cache_uri -%>
EXPLORE_FORM_DATA_CACHE_CONFIG = {
    'CACHE_TYPE': 'memcached',
    'CACHE_DEFAULT_TIMEOUT': 60 * 60 * 12, # 12 hour default (in secs)
    'CACHE_KEY_PREFIX': 'superset_explore_form_data',
    'CACHE_MEMCACHED_SERVERS': ['<%= @explore_form_data_cache_uri %>'],
}
<% end -%>

FEATURE_FLAGS = {
    "ENABLE_TEMPLATE_PROCESSING": True,
    "DASHBOARD_NATIVE_FILTERS": True,
    "ENABLE_FILTER_BOX_MIGRATION": True,
}
