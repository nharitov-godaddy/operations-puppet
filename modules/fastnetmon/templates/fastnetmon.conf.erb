<%#- SPDX-License-Identifier: Apache-2.0 -%>
# This file is managed by Puppet
# Full configuration options at https://github.com/pavel-odintsov/fastnetmon/blob/v1.1.3/src/fastnetmon.conf
###
### Main configuration params
###

### Logging configuration

# enable this option if you want to send logs to local syslog facility
logging:local_syslog_logging = on

# enable this option if you want to send logs to a remote syslog server via UDP
logging:remote_syslog_logging = off

# Enable/Disable any actions in case of attack
enable_ban = on

# disable processing for certain direction of traffic
process_incoming_traffic = on
process_outgoing_traffic = off

# How many packets will be collected from attack traffic
ban_details_records_count = 1000

# How long (in seconds) we should keep an IP in blocked state
# If you set 0 here it completely disables unban capability
#
# Every (ban_time/2) seconds, a background thread scans the list of active bans
# (basically the list of believed-ongoing attacks).  First it checks if the
# ban is old enough to consider unbanning it.  If so, if unban_only_if_attack_finished
# is set, then it checks if there's still elevated traffic to that IP.
#
# We set a short ban_time so that our Icinga integration can know quickly when
# an attack has ended.
ban_time = 120

# Check if the attack is still active, before triggering an unban callback with this option
# If the attack is still active, check each run of the unban watchdog
unban_only_if_attack_finished = on

# enable per subnet speed meters
# For each subnet, list track speed in bps and pps for both directions
enable_subnet_counters = on

# list of all your networks in CIDR format
networks_list_path = /etc/networks_list

# redraw period for client's screen
check_period = 1

# Connection tracking is very useful for attack detection because it provides huge amounts of information,
# but it's very CPU intensive and not recommended in big networks
enable_connection_tracking = off

# Different approaches to attack detection
ban_for_pps = on
ban_for_bandwidth = on
ban_for_flows = off

# Limits for Dos/DDoS attacks
threshold_pps = 1250000
threshold_mbps = 6000

# Per protocol attack thresholds
# We don't implement per protocol flow limits, sorry :(
# These limits should be smaller than global pps/mbps limits

ban_for_tcp_bandwidth = off
ban_for_udp_bandwidth = off
ban_for_icmp_bandwidth = off

ban_for_tcp_pps = off
ban_for_udp_pps = off
ban_for_icmp_pps = off

###
### Traffic capture methods
###

# PF_RING traffic capture, fast enough but the wirespeed version needs a paid license
mirror = off

# Netmap traffic capture (very fast but needs patched drivers)
mirror_netmap = off

# SnabbSwitch traffic capture
mirror_snabbswitch = off

# AF_PACKET capture engine
# Please use it only with modern Linux kernels (3.6 and more)
# And please install birq for irq ditribution over cores
mirror_afpacket = off

# Pcap mode, very slow and thus not suitable for production
pcap = off
# Netflow capture method with v5, v9 and IPFIX support
netflow = on
# sFLOW capture suitable for switches
sflow = off

# PF_RING configuration
# If you have a license for PF_RING ZC, enable this mode and it might achieve wire speed for 10GE
enable_pf_ring_zc_mode = off

# We use average values for traffic speed to certain IP and we calculate average over this time slice
# See https://fastnetmon.com/docs/junos_integration/
average_calculation_time = 20

# We use average values for traffic speed for subnet and we calculate average over this time slice
average_calculation_time_for_subnets = 20

# Delay between traffic recalculation attempts
speed_calculation_delay = 1

# Netflow configuration

# it's possible to specify multiple ports here, using commas as delimiter
netflow_port = 2055
netflow_host = 0.0.0.0

# To bind to all interfaces for all protocols:       not possible yet
# To bind to all interfaces for a specific protocol: ::  or 0.0.0.0
# To bind to localhost for a specific protocol:      ::1 or 127.0.0.1

# Netflow v9 and IPFIX agents use different and very complex approaches for notifying about sample ratio
# Here you could specify a sampling ratio for all this agents
# For NetFLOW v5 we extract sampling ratio from packets directely and this option not used
netflow_sampling_ratio = 1000

# In some cases with NetFlow we could get huge bursts related to aggregated data nature
# We could try to get smoother data with this option, i.e. we will divide counters on collection interval time
netflow_divide_counters_on_interval_length = off

###
### Actions when attack detected
###

# This script executed for ban, unban and attack detail collection
notify_script_path = /usr/local/bin/fastnetmon_notify

# pass attack details to notify_script via stdin
# Pass details only in case of "ban" call
# No details will be passed for "unban" call
notify_script_pass_details = on

# collect a full dump of the attack with full payload in pcap compatible format
collect_attack_pcap_dumps = off

# Execute Deep Packet Inspection on captured PCAP packets
process_pcap_attack_dumps_with_dpi = off

# Save attack details to Redis
redis_enabled = off

# We could store attack information to MongoDB
mongodb_enabled = off

# announce blocked IPs with BGP protocol with ExaBGP
exabgp = off

# In complex cases you could have both options enabled and announce host and subnet simultaneously

# Announce Flow Spec rules when we could detect certain attack type
# Please we aware! Flow Spec announce triggered when we collect some details about attack,
# i.e. when we call attack_details script
# Please disable exabgp_announce_host and exabgp_announce_whole_subnet if you want to use this feature
# Please use ExaBGP v4 only (Git version), for more details: https://github.com/FastVPSEestiOu/fastnetmon/blob/master/docs/BGP_FLOW_SPEC.md
exabgp_flow_spec_announces = off

# GoBGP intergation
gobgp = off

# Graphite monitoring
# InfluxDB is also supported, please check our reference:
# https://github.com/FastVPSEestiOu/fastnetmon/blob/master/docs/INFLUXDB_INTEGRATION.md
<% if @graphite_host %>
graphite = on
graphite_host = <%= Resolv.new.getaddress(@graphite_host).to_s %> # needs an IPv4, no CNAME/A
graphite_port = 2003
<% else %>
graphite = off
<% end %>

# Default namespace for Graphite data
graphite_prefix = fastnetmon

# Add local IP addresses and aliases to monitoring list
# Works only for Linux
monitor_local_ip_addresses = off

<% @thresholds_overrides.each do | groupname, attributes| -%>
hostgroup = <%= groupname %>:<%= attributes['hosts'].join(',') %>
<%= groupname %>_enable_ban = on
<% if attributes['thresholds']['pps'] %>
<%= groupname %>_ban_for_pps = on
<%= groupname %>_threshold_pps = <%= attributes['thresholds']['pps'] %>
<% else %>
<%= groupname %>_ban_for_pps = off
<% end -%>
<% if attributes['thresholds']['mbps'] %>
<%= groupname %>_ban_for_bandwidth = on
<%= groupname %>_threshold_mpbs = <%= attributes['thresholds']['mbps'] %>
<% else %>
<%= groupname %>_ban_for_bandwidth = off
<% end -%>
<% if attributes['thresholds']['flows'] %>
<%= groupname %>_ban_for_flows = on
<%= groupname %>_threshold_flows = <%= attributes['thresholds']['flows'] %>
<% else %>
<%= groupname %>_ban_for_flows = off
<% end -%>
<% end -%>

# Path to pid file for checking "if another copy of tool is running", it's useful when you run multiple instances of tool
pid_path = /var/run/fastnetmon.pid

# Path to file where we store information for fastnetmon_client
cli_stats_file_path = /tmp/fastnetmon.dat

# Enable gRPC api (required for fastnetmon_api_client tool)
enable_api = off

# Prometheus monitoring endpoint
prometheus = on

# Prometheus port
prometheus_port = 9209

# Prometheus host
prometheus_host = 0.0.0.0

###
### Client configuration
###

# Field used for sorting in client, valid values are: packets, bytes or flows
sort_parameter = packets
# How much IPs will be listed for incoming and outgoing channel eaters
max_ips_in_list = 7
